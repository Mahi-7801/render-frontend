# Copy these commands into your EC2 terminal to create the setup script

# Navigate to home directory
cd ~

# Create the setup script
cat > setup-backend-on-ec2.sh << 'EOF'
#!/bin/bash

# LAVANGAM Backend Setup Script for EC2
# This script will set up your complete backend environment

echo "🚀 Starting LAVANGAM Backend Setup..."

# Configuration
MYSQL_ROOT_PASSWORD="Lavangam2024!"
MYSQL_USER="lavangam_user"
MYSQL_PASSWORD="Lavangam2024!"
MYSQL_DATABASE="lavangam_db"
BACKEND_DIR="/home/ubuntu/lavangam-backend"
SERVICE_DIR="/etc/systemd/system"

# Step 1: Update System and Install Dependencies
echo "📦 Updating system and installing dependencies..."
sudo apt update && sudo apt upgrade -y
sudo apt install -y python3 python3-pip python3-venv mysql-server nginx git curl wget unzip build-essential php php-mysql

# Step 2: Configure MySQL
echo "🗄️ Configuring MySQL..."
sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '$MYSQL_ROOT_PASSWORD';"
sudo mysql -e "CREATE DATABASE IF NOT EXISTS $MYSQL_DATABASE;"
sudo mysql -e "CREATE USER IF NOT EXISTS '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD';"
sudo mysql -e "GRANT ALL PRIVILEGES ON $MYSQL_DATABASE.* TO '$MYSQL_USER'@'%';"
sudo mysql -e "FLUSH PRIVILEGES;"

# Step 3: Configure Firewall
echo "🔥 Configuring firewall..."
sudo ufw --force enable
sudo ufw allow ssh
sudo ufw allow 80
sudo ufw allow 443
sudo ufw allow 3306
sudo ufw allow 8000
sudo ufw allow 5022
sudo ufw allow 5024
sudo ufw allow 8004
sudo ufw allow 5025
sudo ufw allow 8001
sudo ufw allow 5021
sudo ufw allow 5001
sudo ufw allow 5002

# Step 4: Setup Backend Directory
echo "📁 Setting up backend directory..."
mkdir -p $BACKEND_DIR
cd $BACKEND_DIR

# Create Python virtual environment
python3 -m venv venv
source venv/bin/activate

# Install Python packages
pip install fastapi uvicorn flask flask-cors mysql-connector-python pandas python-dotenv requests beautifulsoup4 selenium

# Step 5: Create Environment Configuration
echo "⚙️ Creating environment configuration..."
cat > .env << 'ENVEOF'
# Database Configuration
DB_HOST=localhost
DB_PORT=3306
DB_NAME=lavangam_db
DB_USER=lavangam_user
DB_PASSWORD=Lavangam2024!

# Service Ports
MAIN_API_PORT=8000
SCRAPERS_API_PORT=5022
SYSTEM_USAGE_PORT=5024
DASHBOARD_API_PORT=8004
ADMIN_METRICS_PORT=5025
ANALYTICS_PORT=8001
E_PROCUREMENT_PORT=5021
FILE_MANAGER_PORT=5001
EXPORT_SERVER_PORT=5002

# Environment
ENVIRONMENT=production
DEBUG=false
ENVEOF

# Step 6: Create Main Application Entry Point
echo "🐍 Creating main application..."
cat > main_app.py << 'PYEOF'
#!/usr/bin/env python3
import subprocess
import threading
import time
import os
from pathlib import Path

def start_service(service_name, command, port):
    """Start a service and monitor it"""
    print(f"Starting {service_name} on port {port}...")
    try:
        process = subprocess.Popen(command, shell=True, cwd=os.getcwd())
        print(f"✅ {service_name} started successfully (PID: {process.pid})")
        return process
    except Exception as e:
        print(f"❌ Failed to start {service_name}: {e}")
        return None

def main():
    print("🚀 LAVANGAM Backend Services Starting...")
    
    # Start main API service
    main_api = start_service("Main API", "python3 -m uvicorn main:app --host 0.0.0.0 --port 8000", 8000)
    
    # Keep the main process running
    try:
        while True:
            time.sleep(10)
            print("🔄 Main process running...")
    except KeyboardInterrupt:
        print("🛑 Shutting down services...")
        if main_api:
            main_api.terminate()

if __name__ == "__main__":
    main()
PYEOF

# Step 7: Create Systemd Service
echo "🔧 Creating systemd service..."
sudo tee $SERVICE_DIR/lavangam-backend.service > /dev/null << 'SERVICEEOF'
[Unit]
Description=LAVANGAM Backend Services
After=network.target mysql.service

[Service]
Type=simple
User=ubuntu
WorkingDirectory=/home/ubuntu/lavangam-backend
Environment=PATH=/home/ubuntu/lavangam-backend/venv/bin
ExecStart=/home/ubuntu/lavangam-backend/venv/bin/python main_app.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
SERVICEEOF

# Step 8: Configure Nginx
echo "🌐 Configuring Nginx..."
sudo tee /etc/nginx/sites-available/lavangam-backend > /dev/null << 'NGINXEOF'
server {
    listen 80;
    server_name _;

    # Main API
    location /api/ {
        proxy_pass http://localhost:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Health check
    location /health {
        proxy_pass http://localhost:8000/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # Root redirect
    location / {
        return 301 /api/;
    }
}
NGINXEOF

# Enable the site
sudo ln -sf /etc/nginx/sites-available/lavangam-backend /etc/nginx/sites-enabled/
sudo rm -f /etc/nginx/sites-enabled/default

# Step 9: Create Management Scripts
echo "📝 Creating management scripts..."
cat > start_services.sh << 'SCRIPTEOF'
#!/bin/bash
echo "Starting LAVANGAM Backend Services..."
sudo systemctl start lavangam-backend
sudo systemctl start nginx
sudo systemctl start mysql
echo "Services started!"
SCRIPTEOF

cat > check_services.py << 'PYSCRIPTEOF'
#!/usr/bin/env python3
import socket
import subprocess
import requests
import time

SERVICES = {
    "Main API": 8000,
    "MySQL": 3306,
    "Nginx": 80
}

def check_port(port, service_name):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', port))
        sock.close()
        return result == 0
    except:
        return False

def check_systemd_service(service_name):
    try:
        result = subprocess.run(['systemctl', 'is-active', service_name], 
                              capture_output=True, text=True)
        return result.stdout.strip() == 'active'
    except:
        return False

def main():
    print("🔍 LAVANGAM Backend Health Check")
    print("=" * 40)
    
    all_healthy = True
    
    # Check ports
    for service, port in SERVICES.items():
        status = "✅ RUNNING" if check_port(port, service) else "❌ STOPPED"
        print(f"{service:<15} {status}")
        if not check_port(port, service):
            all_healthy = False
    
    # Check systemd services
    systemd_services = ["mysql", "nginx", "lavangam-backend"]
    for service in systemd_services:
        status = "✅ ACTIVE" if check_systemd_service(service) else "❌ INACTIVE"
        print(f"{service:<15} {status}")
        if not check_systemd_service(service):
            all_healthy = False
    
    print("=" * 40)
    if all_healthy:
        print("🎉 All services are running!")
    else:
        print("⚠️ Some services need attention")
    
    return all_healthy

if __name__ == "__main__":
    main()
PYSCRIPTEOF

# Make scripts executable
chmod +x start_services.sh
chmod +x check_services.py

# Step 10: Final Configuration
echo "🔧 Final configuration..."
sudo systemctl daemon-reload
sudo systemctl enable lavangam-backend
sudo systemctl enable nginx
sudo systemctl enable mysql

# Start services
echo "🚀 Starting services..."
sudo systemctl start mysql
sudo systemctl start nginx
sudo systemctl start lavangam-backend

# Step 11: Verification
echo "✅ Setup complete! Verifying services..."
sleep 5
python3 check_services.py

echo ""
echo "🎉 LAVANGAM Backend Setup Complete!"
echo "=================================="
echo "Your backend is now running at:"
echo "- Main API: http://$(curl -s ifconfig.me):8000"
echo "- Health Check: http://$(curl -s ifconfig.me):8000/health"
echo ""
echo "Management commands:"
echo "- Check status: python3 check_services.py"
echo "- Start services: ./start_services.sh"
echo "- View logs: sudo journalctl -u lavangam-backend -f"
echo ""
echo "MySQL Credentials:"
echo "- Root: root / $MYSQL_ROOT_PASSWORD"
echo "- User: $MYSQL_USER / $MYSQL_PASSWORD"
echo "- Database: $MYSQL_DATABASE"
EOF

# Make the script executable
chmod +x setup-backend-on-ec2.sh

echo "✅ Setup script created successfully!"
echo "Now run: ./setup-backend-on-ec2.sh"
